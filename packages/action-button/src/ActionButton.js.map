{"version":3,"file":"ActionButton.js","sourceRoot":"","sources":["../../../../../src/packages/action-button/src/ActionButton.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    CSSResultArray,\r\n    html,\r\n    property,\r\n    PropertyValues,\r\n    TemplateResult,\r\n    SizedMixin,\r\n    ElementSize\r\n} from '../../base/src/index';\r\nimport { ButtonBase } from '../../button/src/index';\r\n\r\nimport buttonStyles from './action-button.css.js';\r\nimport cornerTriangleStyles from '@spectrum-web-components/icon/src/spectrum-icon-corner-triangle.css.js';\r\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-corner-triangle300.js';\r\n\r\nconst holdAffordanceClass = {\r\n    s: 'spectrum-UIIcon-CornerTriangle75',\r\n    m: 'spectrum-UIIcon-CornerTriangle100',\r\n    l: 'spectrum-UIIcon-CornerTriangle200',\r\n    xl: 'spectrum-UIIcon-CornerTriangle300'\r\n};\r\n\r\nconst LONGPRESS_DURATION = 300;\r\nlet LONGPRESS_TIMEOUT: ReturnType<typeof setTimeout>;\r\n\r\nexport type LongpressEvent = {\r\n    source: 'pointer' | 'keyboard';\r\n};\r\n\r\ntype ActionButtonSize = Exclude<ElementSize, 'xxl'>;\r\n\r\n/**\r\n * @element sp-card\r\n *\r\n * @fires change - Announces a change in the `selected` property of an action button\r\n * @fires longpress - Synthesizes a \"longpress\" interaction that signifies a\r\n * `pointerdown` event that is >=300ms or a keyboard event wher code is `Space` or code is `ArrowDown`\r\n * while `altKey===true`.\r\n */\r\nexport class ActionButton extends SizedMixin(ButtonBase) {\r\n    public static get styles(): CSSResultArray {\r\n        return [buttonStyles, cornerTriangleStyles];\r\n    }\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public emphasized = false;\r\n\r\n    @property({ type: Boolean, reflect: true, attribute: 'hold-affordance' })\r\n    public holdAffordance = false;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public quiet = false;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public selected = false;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public toggles = false;\r\n\r\n    @property({ type: String })\r\n    public get value(): string {\r\n        return this._value || this.itemText;\r\n    }\r\n\r\n    public set value(value: string) {\r\n        if (value === this._value) {\r\n            return;\r\n        }\r\n        this._value = value || '';\r\n        if (this._value) {\r\n            this.setAttribute('value', this._value);\r\n        } else {\r\n            this.removeAttribute('value');\r\n        }\r\n    }\r\n\r\n    private _value = '';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    public get itemText(): string {\r\n        return (this.textContent || /* c8 ignore next */ '').trim();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.addEventListener('click', this.onClick);\r\n        this.addEventListener('pointerdown', this.onPointerdown);\r\n    }\r\n\r\n    private onClick = (): void => {\r\n        if (!this.toggles) {\r\n            return;\r\n        }\r\n        this.selected = !this.selected;\r\n        const applyDefault = this.dispatchEvent(\r\n            new Event('change', {\r\n                cancelable: true\r\n            })\r\n        );\r\n        if (!applyDefault) {\r\n            this.selected = !this.selected;\r\n        }\r\n    };\r\n\r\n    private onPointerdown(): void {\r\n        this.addEventListener('pointerup', this.onPointerup);\r\n        this.addEventListener('pointercancel', this.onPointerup);\r\n        LONGPRESS_TIMEOUT = setTimeout(() => {\r\n            this.dispatchEvent(\r\n                new CustomEvent<LongpressEvent>('longpress', {\r\n                    bubbles: true,\r\n                    composed: true,\r\n                    detail: {\r\n                        source: 'pointer'\r\n                    }\r\n                })\r\n            );\r\n        }, LONGPRESS_DURATION);\r\n    }\r\n\r\n    private onPointerup(): void {\r\n        clearTimeout(LONGPRESS_TIMEOUT);\r\n        this.removeEventListener('pointerup', this.onPointerup);\r\n        this.removeEventListener('pointercancel', this.onPointerup);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    protected handleKeydown(event: KeyboardEvent): void {\r\n        if (!this.holdAffordance) {\r\n            return super.handleKeydown(event);\r\n        }\r\n        const { code, altKey } = event;\r\n        if (code === 'Space' || (altKey && code === 'ArrowDown')) {\r\n            event.preventDefault();\r\n            if (code === 'ArrowDown') {\r\n                event.stopPropagation();\r\n                event.stopImmediatePropagation();\r\n            }\r\n            this.addEventListener('keyup', this.handleKeyup);\r\n            this.active = true;\r\n        }\r\n    }\r\n\r\n    protected handleKeyup(event: KeyboardEvent): void {\r\n        if (!this.holdAffordance) {\r\n            return super.handleKeyup(event);\r\n        }\r\n        const { code, altKey } = event;\r\n        if (code === 'Space' || (altKey && code === 'ArrowDown')) {\r\n            event.stopPropagation();\r\n            this.dispatchEvent(\r\n                new CustomEvent<LongpressEvent>('longpress', {\r\n                    bubbles: true,\r\n                    composed: true,\r\n                    detail: {\r\n                        source: 'keyboard'\r\n                    }\r\n                })\r\n            );\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    protected get buttonContent(): TemplateResult[] {\r\n        const buttonContent = super.buttonContent;\r\n        if (this.holdAffordance) {\r\n            buttonContent.unshift(html`\r\n                <sp-icon-corner-triangle300\r\n                    id='hold-affordance'\r\n                    class='${holdAffordanceClass[\r\n                        this.size as ActionButtonSize\r\n                        ]}'\r\n                ></sp-icon-corner-triangle300>\r\n            `);\r\n        }\r\n        return buttonContent;\r\n    }\r\n\r\n    protected updated(changes: PropertyValues): void {\r\n        super.updated(changes);\r\n        if (this.toggles && changes.has('selected')) {\r\n            this.focusElement.setAttribute(\r\n                'aria-pressed',\r\n                this.selected ? 'true' : 'false'\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface GlobalEventHandlersEventMap {\r\n        longpress: CustomEvent<LongpressEvent>;\r\n    }\r\n}\r\n"]}