{"version":3,"file":"Test-Textfield.js","sourceRoot":"","sources":["../../../../../src/packages/textfield/src/Test-Textfield.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;EAUE;;AAEF,OAAO,EACH,IAAI,EACJ,QAAQ,EAER,KAAK,EAGL,OAAO,EACP,SAAS,EACT,IAAI,GACP,MAAM,+BAA+B,CAAC;AAEvC,OAAO,EAAE,SAAS,EAAE,MAAM,kDAAkD,CAAC;AAC7E,OAAO,iEAAiE,CAAC;AACzE,OAAO,gEAAgE,CAAC;AAExE,OAAO,eAAe,MAAM,oBAAoB,CAAC;AACjD,OAAO,eAAe,MAAM,kEAAkE,CAAC;AAE/F,MAAM,OAAO,aAAc,SAAQ,SAAS;IAA5C;;QAMI,gBAAW,GAAG,EAAE,CAAC;QAGV,YAAO,GAAG,KAAK,CAAC;QAMhB,YAAO,GAAG,KAAK,CAAC;QAGhB,UAAK,GAAG,EAAE,CAAC;QAGX,gBAAW,GAAG,EAAE,CAAC;QAMjB,UAAK,GAAG,KAAK,CAAC;QAGd,cAAS,GAAG,CAAC,CAAC,CAAC;QAGf,cAAS,GAAG,CAAC,CAAC,CAAC;QAGf,cAAS,GAAG,KAAK,CAAC;QAGlB,aAAQ,GAAG,KAAK,CAAC;QAGjB,UAAK,GAAG,KAAK,CAAC;QAgBX,WAAM,GAAoB,EAAE,CAAC;QAGhC,UAAK,GAAG,KAAK,CAAC;QAGd,aAAQ,GAAG,KAAK,CAAC;IAwK5B,CAAC;IAvOU,MAAM,KAAK,MAAM;QACpB,OAAO,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IAC9C,CAAC;IA0CD,IAAW,KAAK,CAAC,KAAsB;QACnC,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;YACtB,OAAO;SACV;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAeD,IAAW,YAAY;QACnB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAES,OAAO;QACb,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;YAC7C,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC,WAAW,KAAK,EAAE,GAAG,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;gBACvC,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY;qBACnC,cAAwB,CAAC;gBAC9B,MAAM,eAAe,GAAG,cAAc,GAAG,CAAC,CAAC;gBAC3C,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;gBAChD,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAC/B,eAAe,EACf,eAAe,CAClB,CAAC;gBACF,OAAO;aACV;SACJ;QACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QACrC,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,cAAwB,CAAC;QAClE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE;YAC1B,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACP,CAAC;IAES,QAAQ;QACd,IAAI,CAAC,aAAa,CACd,IAAI,KAAK,CAAC,QAAQ,EAAE;YAChB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACjB,CAAC,CACL,CAAC;IACN,CAAC;IAES,OAAO;QACb,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IAES,MAAM;QACZ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAES,gBAAgB;QACtB,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,IAAI,CAAA;;aAEV,CAAC;SACL;aAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YACnB,OAAO,IAAI,CAAA;;;;;aAKV,CAAC;SACL;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,IAAc,YAAY;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC;IAEM,MAAM;QACT,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IAC/B,CAAC;IAED,IAAY,eAAe;QACvB,OAAO,IAAI,CAAA;cACL,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK;YACvB,CAAC,CAAC,IAAI,CAAA;wCACkB,IAAI,CAAC,KAAK;mBAC/B;YACH,CAAC,CAAC,OAAO;;;6BAGI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW;+BAC5B,SAAS,CAAC,IAAI,CAAC,OAAO,IAAI,SAAS,CAAC;;4BAEvC,SAAS,CACjB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CACnD;4BACW,SAAS,CACjB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CACnD;0BACS,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;8BACnB,IAAI,CAAC,WAAW;yBACrB,IAAI,CAAC,YAAY;0BAChB,IAAI,CAAC,QAAQ;yBACd,IAAI,CAAC,OAAO;yBACZ,IAAI,CAAC,OAAO;wBACb,IAAI,CAAC,MAAM;4BACP,IAAI,CAAC,QAAQ;4BACb,IAAI,CAAC,QAAQ;4BACb,IAAI,CAAC,QAAQ;+BACV,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC;;SAElD,CAAC;IACN,CAAC;IAED,IAAY,WAAW;QACnB,OAAO,IAAI,CAAA;;;;6BAIU,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW;+BAC5B,SAAS,CAAC,IAAI,CAAC,OAAO,IAAI,SAAS,CAAC;;4BAEvC,SAAS,CACjB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CACnD;4BACW,SAAS,CACjB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CACnD;0BACS,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;8BACnB,IAAI,CAAC,WAAW;yBACrB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;0BACtB,IAAI,CAAC,QAAQ;yBACd,IAAI,CAAC,OAAO;yBACZ,IAAI,CAAC,OAAO;wBACb,IAAI,CAAC,MAAM;4BACP,IAAI,CAAC,QAAQ;4BACb,IAAI,CAAC,QAAQ;4BACb,IAAI,CAAC,QAAQ;+BACV,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC;;SAElD,CAAC;IACN,CAAC;IAES,MAAM;QACZ,OAAO,IAAI,CAAA;cACL,IAAI,CAAC,gBAAgB,EAAE;cACvB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW;SAC7D,CAAC;IACN,CAAC;IAES,OAAO,CAAC,iBAAiC;QAC/C,IACI,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC;YAC9B,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,EACtD;YACE,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;IACL,CAAC;IAEM,aAAa;QAChB,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC;QACjD,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;YAC/C,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;gBACnD,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,CAAC,CAAC;gBACnD,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;aAChD;YACD,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,WAAW,EAAE;gBACvC,QAAQ;oBACJ,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;aACjE;YACD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC;SAC5B;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;AAlOG;IADC,QAAQ,CAAC,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;kDACvB;AAGjB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;8CACpB;AAGvB;IADC,KAAK,CAAC,QAAQ,CAAC;mDACgD;AAGhE;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;8CACpB;AAGvB;IADC,QAAQ,EAAE;4CACO;AAGlB;IADC,QAAQ,EAAE;kDACa;AAGxB;IADC,QAAQ,EAAE;8CACa;AAGxB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4CACtB;AAGrB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gDACL;AAGtB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gDACL;AAGtB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;gDAClB;AAGzB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;+CACnB;AAGxB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4CACtB;AAGrB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;0CAQ1B;AASD;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4CACtB;AAGrB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;+CACnB;AAGxB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;mDAGA;AAqK9C,MAAM,OAAO,SAAU,SAAQ,aAAa;IAA5C;;QAec,WAAM,GAAG,EAAE,CAAC;IAC1B,CAAC;IAdG,IAAW,KAAK,CAAC,KAAa;QAC1B,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;YACtB,OAAO;SACV;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;CAGJ;AAdG;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;sCAQ1B","sourcesContent":["/*\r\nCopyright 2020 Adobe. All rights reserved.\r\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License. You may obtain a copy\r\nof the License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed under\r\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\nOF ANY KIND, either express or implied. See the License for the specific language\r\ngoverning permissions and limitations under the License.\r\n*/\r\n\r\nimport {\r\n    html,\r\n    property,\r\n    CSSResultArray,\r\n    query,\r\n    TemplateResult,\r\n    PropertyValues,\r\n    nothing,\r\n    ifDefined,\r\n    live,\r\n} from '@spectrum-web-components/base';\r\n\r\nimport { Focusable } from '@spectrum-web-components/shared/src/focusable.js';\r\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-checkmark100.js';\r\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';\r\n\r\nimport textfieldStyles from './textfield.css.js';\r\nimport checkmarkStyles from '@spectrum-web-components/icon/src/spectrum-icon-checkmark.css.js';\r\n\r\nexport class TextfieldBase extends Focusable {\r\n    public static get styles(): CSSResultArray {\r\n        return [textfieldStyles, checkmarkStyles];\r\n    }\r\n\r\n    @property({ attribute: 'allowed-keys' })\r\n    allowedKeys = '';\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public focused = false;\r\n\r\n    @query('.input')\r\n    protected inputElement!: HTMLInputElement | HTMLTextAreaElement;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public invalid = false;\r\n\r\n    @property()\r\n    public label = '';\r\n\r\n    @property()\r\n    public placeholder = '';\r\n\r\n    @property()\r\n    public pattern?: string;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public grows = false;\r\n\r\n    @property({ type: Number })\r\n    public maxlength = -1;\r\n\r\n    @property({ type: Number })\r\n    public minlength = -1;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public multiline = false;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public readonly = false;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public valid = false;\r\n\r\n    @property({ type: String })\r\n    public set value(value: string | number) {\r\n        if (value === this.value) {\r\n            return;\r\n        }\r\n        const oldValue = this._value;\r\n        this._value = value;\r\n        this.requestUpdate('value', oldValue);\r\n    }\r\n\r\n    public get value(): string | number {\r\n        return this._value;\r\n    }\r\n\r\n    protected _value: string | number = '';\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public quiet = false;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public required = false;\r\n\r\n    @property({ type: String, reflect: true })\r\n    public autocomplete?:\r\n        | HTMLInputElement['autocomplete']\r\n        | HTMLTextAreaElement['autocomplete'];\r\n\r\n    public get focusElement(): HTMLInputElement | HTMLTextAreaElement {\r\n        return this.inputElement;\r\n    }\r\n\r\n    protected onInput(): void {\r\n        if (this.allowedKeys && this.inputElement.value) {\r\n            const regExp = new RegExp(`^[${this.allowedKeys}]*$`, 'u');\r\n            if (!regExp.test(this.inputElement.value)) {\r\n                const selectionStart = this.inputElement\r\n                    .selectionStart as number;\r\n                const nextSelectStart = selectionStart - 1;\r\n                this.inputElement.value = this.value.toString();\r\n                this.inputElement.setSelectionRange(\r\n                    nextSelectStart,\r\n                    nextSelectStart\r\n                );\r\n                return;\r\n            }\r\n        }\r\n        this.value = this.inputElement.value;\r\n        const selectionStart = this.inputElement.selectionStart as number;\r\n        this.updateComplete.then(() => {\r\n            this.inputElement.setSelectionRange(selectionStart, selectionStart);\r\n        });\r\n    }\r\n\r\n    protected onChange(): void {\r\n        this.dispatchEvent(\r\n            new Event('change', {\r\n                bubbles: true,\r\n                composed: true,\r\n            })\r\n        );\r\n    }\r\n\r\n    protected onFocus(): void {\r\n        this.focused = true;\r\n    }\r\n\r\n    protected onBlur(): void {\r\n        this.focused = false;\r\n    }\r\n\r\n    protected renderStateIcons(): TemplateResult | typeof nothing {\r\n        if (this.invalid) {\r\n            return html`\r\n                <sp-icon-alert id=\"invalid\" class=\"icon\"></sp-icon-alert>\r\n            `;\r\n        } else if (this.valid) {\r\n            return html`\r\n                <sp-icon-checkmark100\r\n                    id=\"valid\"\r\n                    class=\"icon spectrum-UIIcon-Checkmark100\"\r\n                ></sp-icon-checkmark100>\r\n            `;\r\n        }\r\n        return nothing;\r\n    }\r\n\r\n    protected get displayValue(): string {\r\n        return this.value.toString();\r\n    }\r\n\r\n    public select(): void {\r\n        this.inputElement.select();\r\n    }\r\n\r\n    private get renderMultiline(): TemplateResult {\r\n        return html`\r\n            ${this.grows && !this.quiet\r\n                ? html`\r\n                      <div id=\"sizer\">${this.value}</div>\r\n                  `\r\n                : nothing}\r\n            <!-- @ts-ignore -->\r\n            <textarea\r\n                aria-label=${this.label || this.placeholder}\r\n                aria-invalid=${ifDefined(this.invalid || undefined)}\r\n                class=\"input\"\r\n                maxlength=${ifDefined(\r\n                    this.maxlength > -1 ? this.maxlength : undefined\r\n                )}\r\n                minlength=${ifDefined(\r\n                    this.minlength > -1 ? this.minlength : undefined\r\n                )}\r\n                pattern=${ifDefined(this.pattern)}\r\n                placeholder=${this.placeholder}\r\n                .value=${this.displayValue}\r\n                @change=${this.onChange}\r\n                @input=${this.onInput}\r\n                @focus=${this.onFocus}\r\n                @blur=${this.onBlur}\r\n                ?disabled=${this.disabled}\r\n                ?required=${this.required}\r\n                ?readonly=${this.readonly}\r\n                autocomplete=${ifDefined(this.autocomplete)}\r\n            ></textarea>\r\n        `;\r\n    }\r\n\r\n    private get renderInput(): TemplateResult {\r\n        return html`\r\n            <!-- @ts-ignore -->\r\n            <input\r\n                type=\"text\"\r\n                aria-label=${this.label || this.placeholder}\r\n                aria-invalid=${ifDefined(this.invalid || undefined)}\r\n                class=\"input\"\r\n                maxlength=${ifDefined(\r\n                    this.maxlength > -1 ? this.maxlength : undefined\r\n                )}\r\n                minlength=${ifDefined(\r\n                    this.minlength > -1 ? this.minlength : undefined\r\n                )}\r\n                pattern=${ifDefined(this.pattern)}\r\n                placeholder=${this.placeholder}\r\n                .value=${live(this.displayValue)}\r\n                @change=${this.onChange}\r\n                @input=${this.onInput}\r\n                @focus=${this.onFocus}\r\n                @blur=${this.onBlur}\r\n                ?disabled=${this.disabled}\r\n                ?required=${this.required}\r\n                ?readonly=${this.readonly}\r\n                autocomplete=${ifDefined(this.autocomplete)}\r\n            />\r\n        `;\r\n    }\r\n\r\n    protected render(): TemplateResult {\r\n        return html`\r\n            ${this.renderStateIcons()}\r\n            ${this.multiline ? this.renderMultiline : this.renderInput}\r\n        `;\r\n    }\r\n\r\n    protected updated(changedProperties: PropertyValues): void {\r\n        if (\r\n            changedProperties.has('value') ||\r\n            (changedProperties.has('required') && this.required)\r\n        ) {\r\n            this.checkValidity();\r\n        }\r\n    }\r\n\r\n    public checkValidity(): boolean {\r\n        let validity = this.inputElement.checkValidity();\r\n        if (this.required || (this.value && this.pattern)) {\r\n            if ((this.disabled || this.multiline) && this.pattern) {\r\n                const regex = new RegExp(`^${this.pattern}$`, 'u');\r\n                validity = regex.test(this.value.toString());\r\n            }\r\n            if (typeof this.minlength !== 'undefined') {\r\n                validity =\r\n                    validity && this.value.toString().length > this.minlength;\r\n            }\r\n            this.valid = validity;\r\n            this.invalid = !validity;\r\n        }\r\n        return validity;\r\n    }\r\n}\r\n\r\nexport class Textfield extends TextfieldBase {\r\n    @property({ type: String })\r\n    public set value(value: string) {\r\n        if (value === this.value) {\r\n            return;\r\n        }\r\n        const oldValue = this._value;\r\n        this._value = value;\r\n        this.requestUpdate('value', oldValue);\r\n    }\r\n\r\n    public get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    protected _value = '';\r\n}\r\n"]}