{"version":3,"file":"Dialog.js","sourceRoot":"","sources":["../../../../../src/packages/dialog/src/Dialog.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    html,\r\n    SpectrumElement,\r\n    CSSResultArray,\r\n    TemplateResult,\r\n    property,\r\n    query,\r\n    ifDefined,\r\n    PropertyValues,\r\n} from '../../base/src/index';\r\n\r\nimport '../../divider/sp-divider.js';\r\nimport '../../action-button/sp-action-button.js';\r\nimport '../../button-group/sp-button-group.js';\r\nimport crossStyles from '@spectrum-web-components/icon/src/spectrum-icon-cross.css.js';\r\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-cross500.js';\r\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';\r\nimport {\r\n    ObserveSlotPresence,\r\n    FocusVisiblePolyfillMixin,\r\n} from '../../shared/src/index';\r\n\r\nimport styles from './dialog.css.js';\r\n\r\n/**\r\n * @element sp-dialog\r\n *\r\n * @slot hero - Accepts a hero image to display at the top of the dialog\r\n * @slot heading - Acts as the heading of the dialog. This should be an actual heading tag `<h1-6 />`\r\n * @slot - Content not addressed to a specific slot will be interpreted as the main content of the dialog\r\n * @slot footer - Content addressed to the `footer` will be placed below the main content and to the side of any `[slot='button']` content\r\n * @slot button - Button elements addressed to this slot may be placed below the content when not delivered in a fullscreen mode\r\n * @fires close - Announces that the dialog has been closed.\r\n */\r\nexport class Dialog extends FocusVisiblePolyfillMixin(\r\n    ObserveSlotPresence(SpectrumElement, [\r\n        '[slot=\"hero\"]',\r\n        '[slot=\"footer\"]',\r\n        '[slot=\"button\"]',\r\n    ])\r\n) {\r\n    public static get styles(): CSSResultArray {\r\n        return [styles, crossStyles];\r\n    }\r\n\r\n    @query('.content')\r\n    private contentElement!: HTMLDivElement;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public error = false;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public dismissable = false;\r\n\r\n    protected get hasFooter(): boolean {\r\n        return this.getSlotContentPresence('[slot=\"footer\"]');\r\n    }\r\n\r\n    protected get hasButtons(): boolean {\r\n        return this.getSlotContentPresence('[slot=\"button\"]');\r\n    }\r\n\r\n    protected get hasHero(): boolean {\r\n        return this.getSlotContentPresence('[slot=\"hero\"]');\r\n    }\r\n\r\n    @property({ type: Boolean, reflect: true, attribute: 'no-divider' })\r\n    public noDivider = false;\r\n\r\n    @property({ type: String, reflect: true })\r\n    public mode?: 'fullscreen' | 'fullscreenTakeover';\r\n\r\n    @property({ type: String, reflect: true })\r\n    public size?: 'small' | 'medium' | 'large' | 'alert';\r\n\r\n    public focus(): void {\r\n        if (this.shadowRoot) {\r\n            const firstFocusable = this.shadowRoot.querySelector(\r\n                'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"]), [focusable]'\r\n            ) as SpectrumElement;\r\n            if (firstFocusable) {\r\n                if (firstFocusable.updateComplete) {\r\n                    firstFocusable.updateComplete.then(() =>\r\n                        firstFocusable.focus()\r\n                    );\r\n                    /* c8 ignore next 3 */\r\n                } else {\r\n                    firstFocusable.focus();\r\n                }\r\n                this.removeAttribute('tabindex');\r\n            }\r\n            /* c8 ignore next 3 */\r\n        } else {\r\n            super.focus();\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        this.dispatchEvent(\r\n            new Event('close', {\r\n                bubbles: true,\r\n            })\r\n        );\r\n    }\r\n\r\n    protected render(): TemplateResult {\r\n        return html`\r\n            <div class=\"grid\">\r\n                <slot name=\"hero\"></slot>\r\n                <slot\r\n                    name=\"heading\"\r\n                    class=${ifDefined(this.hasHero ? this.hasHero : undefined)}\r\n                ></slot>\r\n                ${this.error\r\n                    ? html`\r\n                          <sp-icon-alert class=\"type-icon\"></sp-icon-alert>\r\n                      `\r\n                    : html``}\r\n                ${this.noDivider\r\n                    ? html``\r\n                    : html`\r\n                          <sp-divider size=\"m\" class=\"divider\"></sp-divider>\r\n                      `}\r\n                <div class=\"content\">\r\n                    <slot @slotchange=${this.onContentSlotChange}></slot>\r\n                </div>\r\n                ${this.hasFooter\r\n                    ? html`\r\n                          <div class=\"footer\">\r\n                              <slot name=\"footer\"></slot>\r\n                          </div>\r\n                      `\r\n                    : html``}\r\n                ${this.hasButtons\r\n                    ? html`\r\n                          <cm-button-group\r\n                              class=\"buttonGroup ${this.hasFooter\r\n                                  ? ''\r\n                                  : 'buttonGroup--noFooter'}\"\r\n                          >\r\n                              <slot name=\"button\"></slot>\r\n                          </cm-button-group>\r\n                      `\r\n                    : html``}\r\n                ${this.dismissable\r\n                    ? html`\r\n                          <cm-action-button\r\n                              class=\"close-button\"\r\n                              label=\"Close\"\r\n                              quiet\r\n                              size=\"m\"\r\n                              @click=${this.close}\r\n                          >\r\n                              <iron-icon icon=\"vaadin:close-small\"></iron-icon>\r\n                          </cm-action-button>\r\n                      `\r\n                    : html``}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    private shouldManageTabOrderForScrolling = (): void => {\r\n        const { offsetHeight, scrollHeight } = this.contentElement;\r\n        if (offsetHeight < scrollHeight) {\r\n            this.contentElement.tabIndex = 0;\r\n        } else {\r\n            this.contentElement.removeAttribute('tabindex');\r\n        }\r\n    };\r\n\r\n    protected shouldUpdate(changes: PropertyValues): boolean {\r\n        if (changes.has('mode') && !!this.mode) {\r\n            this.dismissable = false;\r\n        }\r\n        if (changes.has('dismissable') && this.dismissable) {\r\n            this.dismissable = !this.mode;\r\n        }\r\n        return super.shouldUpdate(changes);\r\n    }\r\n\r\n    protected onContentSlotChange(): void {\r\n        this.shouldManageTabOrderForScrolling();\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        super.connectedCallback();\r\n        window.addEventListener(\r\n            'resize',\r\n            this.shouldManageTabOrderForScrolling\r\n        );\r\n    }\r\n\r\n    public disconnectedCallback(): void {\r\n        window.removeEventListener(\r\n            'resize',\r\n            this.shouldManageTabOrderForScrolling\r\n        );\r\n        super.disconnectedCallback();\r\n    }\r\n}\r\n"]}