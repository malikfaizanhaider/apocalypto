{"version":3,"file":"Toast.js","sourceRoot":"","sources":["Toast.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\nCopyright 2020 Adobe. All rights reserved.\r\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License. You may obtain a copy\r\nof the License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed under\r\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\nOF ANY KIND, either express or implied. See the License for the specific language\r\ngoverning permissions and limitations under the License.\r\n*/\r\n\r\nimport {\r\n    html,\r\n    CSSResultArray,\r\n    TemplateResult,\r\n    SpectrumElement,\r\n    property,\r\n    PropertyValues,\r\n} from '@spectrum-web-components/base';\r\nimport '@spectrum-web-components/button/sp-clear-button.js';\r\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';\r\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-info.js';\r\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-checkmark-circle.js';\r\n\r\nimport toastStyles from './toast.css.js';\r\n\r\nexport const toastVariants: ToastVariants[] = [\r\n    'negative',\r\n    'positive',\r\n    'info',\r\n    'error',\r\n    'warning',\r\n];\r\n\r\nexport type ToastVariants =\r\n    | 'negative'\r\n    | 'positive'\r\n    | 'info'\r\n    | 'error'\r\n    | 'warning'\r\n    | '';\r\n\r\n/**\r\n * @slot - The toast content\r\n */\r\n\r\nexport class Toast extends SpectrumElement {\r\n    public static get styles(): CSSResultArray {\r\n        return [toastStyles];\r\n    }\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public open = false;\r\n\r\n    @property({ type: Number })\r\n    public set timeout(timeout: number | null) {\r\n        const hasTimeout = typeof timeout !== null && (timeout as number) > 0;\r\n        const newTimeout = hasTimeout\r\n            ? Math.max(6000, timeout as number)\r\n            : null;\r\n        const oldValue = this.timeout;\r\n        if (newTimeout && this.countdownStart) {\r\n            this.countdownStart = performance.now();\r\n        }\r\n        this._timeout = newTimeout;\r\n        this.requestUpdate('timeout', oldValue);\r\n    }\r\n\r\n    public get timeout(): number | null {\r\n        return this._timeout;\r\n    }\r\n\r\n    public _timeout: number | null = null;\r\n\r\n    /**\r\n     * The variant applies specific styling when set to `negative`, `positive`, `info`, `error`, or `warning`.\r\n     * `variant` attribute is removed when not matching one of the above.\r\n     *\r\n     * @param {String} variant\r\n     */\r\n    @property({ type: String })\r\n    public set variant(variant: ToastVariants) {\r\n        if (variant === this.variant) {\r\n            return;\r\n        }\r\n        const oldValue = this.variant;\r\n        if (toastVariants.includes(variant)) {\r\n            this.setAttribute('variant', variant);\r\n            this._variant = variant;\r\n        } else {\r\n            this.removeAttribute('variant');\r\n            this._variant = '';\r\n        }\r\n        this.requestUpdate('variant', oldValue);\r\n    }\r\n\r\n    public get variant(): ToastVariants {\r\n        return this._variant;\r\n    }\r\n\r\n    private _variant: ToastVariants = '';\r\n\r\n    private renderIcon(variant: string): TemplateResult {\r\n        switch (variant) {\r\n            case 'info':\r\n                return html`\r\n                    <sp-icon-info\r\n                        label=\"Information\"\r\n                        class=\"type\"\r\n                    ></sp-icon-info>\r\n                `;\r\n            case 'negative':\r\n            case 'error': // deprecated\r\n            case 'warning': // deprecated\r\n                return html`\r\n                    <sp-icon-alert label=\"Error\" class=\"type\"></sp-icon-alert>\r\n                `;\r\n            case 'positive':\r\n            case 'success': // deprecated\r\n                return html`\r\n                    <sp-icon-checkmark-circle\r\n                        label=\"Success\"\r\n                        class=\"type\"\r\n                    ></sp-icon-checkmark-circle>\r\n                `;\r\n            default:\r\n                return html``;\r\n        }\r\n    }\r\n\r\n    private countdownStart = 0;\r\n    private nextCount = -1;\r\n\r\n    private doCountdown = (time: number): void => {\r\n        if (!this.countdownStart) {\r\n            this.countdownStart = performance.now();\r\n        }\r\n        if (time - this.countdownStart > (this._timeout as number)) {\r\n            this.open = false;\r\n            this.countdownStart = 0;\r\n        } else {\r\n            this.countdown();\r\n        }\r\n    };\r\n\r\n    private countdown = (): void => {\r\n        cancelAnimationFrame(this.nextCount);\r\n        this.nextCount = requestAnimationFrame(this.doCountdown);\r\n    };\r\n\r\n    private holdCountdown = (): void => {\r\n        this.stopCountdown();\r\n        this.addEventListener('focusout', this.resumeCountdown);\r\n    };\r\n\r\n    private resumeCountdown = (): void => {\r\n        this.removeEventListener('focusout', this.holdCountdown);\r\n        this.countdown();\r\n    };\r\n\r\n    private startCountdown(): void {\r\n        this.countdown();\r\n        this.addEventListener('focusin', this.holdCountdown);\r\n    }\r\n\r\n    private stopCountdown(): void {\r\n        cancelAnimationFrame(this.nextCount);\r\n        this.countdownStart = 0;\r\n    }\r\n\r\n    public close(): void {\r\n        this.open = false;\r\n    }\r\n\r\n    protected render(): TemplateResult {\r\n        return html`\r\n            ${this.renderIcon(this.variant)}\r\n            <div class=\"body\" role=\"alert\">\r\n                <div class=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n                <slot name=\"action\"></slot>\r\n            </div>\r\n            <div class=\"buttons\">\r\n                <sp-clear-button\r\n                    label=\"Close\"\r\n                    variant=\"overBackground\"\r\n                    @click=${this.close}\r\n                ></sp-clear-button>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    protected updated(changes: PropertyValues): void {\r\n        super.updated(changes);\r\n        if (changes.has('open')) {\r\n            if (this.open) {\r\n                if (this.timeout) {\r\n                    this.startCountdown();\r\n                }\r\n            } else {\r\n                if (this.timeout) {\r\n                    this.stopCountdown();\r\n                }\r\n                const applyDefault = this.dispatchEvent(\r\n                    new CustomEvent('close', {\r\n                        composed: true,\r\n                        bubbles: true,\r\n                        cancelable: true,\r\n                    })\r\n                );\r\n                if (!applyDefault) {\r\n                    this.open = true;\r\n                }\r\n            }\r\n        }\r\n        if (changes.has('timeout')) {\r\n            if (this.timeout !== null && this.open) {\r\n                this.startCountdown();\r\n            } else {\r\n                this.stopCountdown();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}