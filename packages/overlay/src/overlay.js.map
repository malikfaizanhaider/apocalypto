{"version":3,"file":"overlay.js","sourceRoot":"","sources":["../../../../../src/packages/overlay/src/overlay.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright 2021 i2c Inc. All rights reserved. */\n\nimport { ThemeData } from '../../theme/src';\nimport {\n    TriggerInteractions,\n    OverlayDisplayQueryDetail,\n    OverlayOptions\n} from './overlay-types';\nimport { OverlayStack } from './overlay-stack.js';\n\n/**\n * This class allows access to the overlay system which allows a client to\n * position an element in the overlay positioned relative to another node.\n */\nexport class Overlay {\n    private static overlayStack = new OverlayStack();\n\n    private isOpen = false;\n    private overlayElement: HTMLElement;\n    private owner: HTMLElement;\n    private interaction: TriggerInteractions;\n\n    /**\n     *\n     * @param owner the parent element we will use to position the overlay element\n     * @param interaction the type of interaction that caused this overlay to be shown\n     * @param overlayElement the item to display as an overlay\n     */\n    constructor(\n        owner: HTMLElement,\n        interaction: TriggerInteractions,\n        overlayElement: HTMLElement\n    ) {\n        this.owner = owner;\n        this.overlayElement = overlayElement;\n        this.interaction = interaction;\n    }\n\n    /**\n     * Open an overlay\n     *\n     * @param owner the parent element we will use to position the overlay element\n     * @param interaction the type of interaction that caused this overlay to be shown\n     * @param overlayElement the item to display as an overlay\n     * @param options display parameters\n     * @param options.delayed if true delay opening of the overlay based on the global warmup/cooldown timer\n     * @param options.offset distance to offset the overlay\n     * @param options.placement side on which to position the overlay\n     * @returns an Overlay object which can be used to close the overlay\n     */\n    public static async open(\n        owner: HTMLElement,\n        interaction: TriggerInteractions,\n        overlayElement: HTMLElement,\n        options: OverlayOptions\n    ): Promise<() => void> {\n        const overlay = new Overlay(owner, interaction, overlayElement);\n        await overlay.open(options);\n        return (): void => {\n            overlay.close();\n        };\n    }\n\n    public static update(): void {\n        const overlayUpdateEvent = new CustomEvent('sp-update-overlays', {\n            bubbles: true,\n            composed: true,\n            cancelable: true\n        });\n        document.dispatchEvent(overlayUpdateEvent);\n    }\n\n    /**\n     * Open an overlay\n     *\n     * @param options display parameters\n     * @param options.delayed delay before opening the overlay\n     * @param options.offset distance to offset the overlay\n     * @param options.placement side on which to position the overlay\n     * @returns a Promise that resolves to true if this operation was cancelled\n     */\n    public async open({\n                          abortPromise,\n                          delayed,\n                          offset = 0,\n                          placement = 'top',\n                          receivesFocus,\n                          notImmediatelyClosable\n                      }: OverlayOptions): Promise<boolean> {\n        /* c8 ignore next */\n        if (this.isOpen) return true;\n\n        if (delayed === undefined) {\n            delayed = this.overlayElement.hasAttribute('delayed');\n        }\n\n        const queryThemeDetail: ThemeData = {\n            color: undefined,\n            scale: undefined\n        };\n        const queryThemeEvent = new CustomEvent<ThemeData>('cm-query-theme', {\n            bubbles: true,\n            composed: true,\n            detail: queryThemeDetail,\n            cancelable: true\n        });\n        this.owner.dispatchEvent(queryThemeEvent);\n\n        const overlayDetailQuery: OverlayDisplayQueryDetail = {};\n        const queryOverlayDetailEvent = new CustomEvent<OverlayDisplayQueryDetail>('sp-overlay-query', {\n            bubbles: true,\n            composed: true,\n            detail: overlayDetailQuery,\n            cancelable: true\n        });\n        this.overlayElement.dispatchEvent(queryOverlayDetailEvent);\n\n        await Overlay.overlayStack.openOverlay({\n            abortPromise,\n            content: this.overlayElement,\n            contentTip: overlayDetailQuery.overlayContentTipElement,\n            delayed,\n            offset: offset,\n            placement: placement,\n            trigger: this.owner,\n            interaction: this.interaction,\n            theme: queryThemeDetail,\n            receivesFocus,\n            notImmediatelyClosable,\n            ...overlayDetailQuery\n        });\n        this.isOpen = true;\n        return true;\n    }\n\n    /**\n     * Close the overlay if it is open\n     */\n    public close(): void {\n        Overlay.overlayStack.closeOverlay(this.overlayElement);\n    }\n}\n\n/**\n * Announces that an overlay-based UI element has opened\n * @event sp-open\n * @type {object}\n * @property {TriggerInteractions} interaction type of interaction that triggered the opening\n */\n\n/**\n * Announces that an overlay-based UI element has opened\n * @event sp-close\n * @type {object}\n * @property {TriggerInteractions} interaction type of interaction that triggered the closing\n */\n"]}