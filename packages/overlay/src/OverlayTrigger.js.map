{"version":3,"file":"OverlayTrigger.js","sourceRoot":"","sources":["../../../../../src/packages/overlay/src/OverlayTrigger.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright 2021 i2c Inc. All rights reserved. */\r\n\r\nimport {\r\n    html,\r\n    LitElement,\r\n    property,\r\n    CSSResultArray,\r\n    TemplateResult,\r\n    PropertyValues,\r\n} from '../../base/src/index';\r\nimport type { LongpressEvent } from '../../action-button/src/index';\r\n\r\nimport {\r\n    Placement,\r\n    TriggerInteractions,\r\n    OverlayOptions,\r\n    OverlayOpenCloseDetail,\r\n} from './overlay-types';\r\nimport { openOverlay } from './loader.js';\r\nimport overlayTriggerStyles from './overlay-trigger.css.js';\r\n\r\nexport type OverlayContentTypes = 'click' | 'hover' | 'longpress';\r\n\r\n/**\r\n * A overlay trigger component for displaying overlays relative to other content.\r\n * @element overlay-trigger\r\n *\r\n * @slot trigger - The content that will trigger the various overlays\r\n * @slot hover-content - The content that will be displayed on hover\r\n * @slot click-content - The content that will be displayed on click\r\n * @slot longpress-content - The content that will be displayed on click\r\n *\r\n * @fires sp-opened - Announces that the overlay has been opened\r\n * @fires sp-closed - Announces that the overlay has been closed\r\n */\r\nexport class OverlayTrigger extends LitElement {\r\n    private closeClickOverlay?: () => void;\r\n    private closeLongpressOverlay?: () => void;\r\n    private closeHoverOverlay?: () => void;\r\n\r\n    public static get styles(): CSSResultArray {\r\n        return [overlayTriggerStyles];\r\n    }\r\n\r\n    /**\r\n     * @type {\"auto\" | \"auto-start\" | \"auto-end\" | \"top\" | \"bottom\" | \"right\" | \"left\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"none\"}\r\n     * @attr\r\n     */\r\n    @property({ reflect: true })\r\n    public placement: Placement = 'bottom';\r\n\r\n    @property()\r\n    public type?: Extract<TriggerInteractions, 'inline' | 'modal' | 'replace'>;\r\n\r\n    @property({ type: Number, reflect: true })\r\n    public offset = 6;\r\n\r\n    @property({ reflect: true })\r\n    public open?: OverlayContentTypes;\r\n\r\n    @property({ type: Boolean, reflect: true })\r\n    public disabled = false;\r\n\r\n    private clickContent?: HTMLElement;\r\n    private longpressContent?: HTMLElement;\r\n    private hoverContent?: HTMLElement;\r\n    private targetContent?: HTMLElement;\r\n\r\n    private handleClose(event?: CustomEvent<OverlayOpenCloseDetail>): void {\r\n        if (\r\n            event?.detail.interaction !== this.open &&\r\n            event?.detail.interaction !== this.type\r\n        ) {\r\n            return;\r\n        }\r\n        this.removeAttribute('open');\r\n    }\r\n\r\n    protected render(): TemplateResult {\r\n        // Keyboard event availability documented in README.md\r\n        /* eslint-disable lit-a11y/click-events-have-key-events */\r\n        return html`\r\n            <div\r\n                id=\"trigger\"\r\n                @click=\"${this.onTrigger}\"\r\n                @longpress=\"${this.onTrigger}\"\r\n                @mouseenter=\"${this.onTrigger}\"\r\n                @mouseleave=\"${this.onTrigger}\"\r\n                @focusin=\"${this.onTrigger}\"\r\n                @focusout=\"${this.onTrigger}\"\r\n                @sp-closed=\"${this.handleClose}\"\r\n            >\r\n                <slot\r\n                    @slotchange=\"${this.onTargetSlotChange}\"\r\n                    name=\"trigger\"\r\n                ></slot>\r\n            </div>\r\n            <div id=\"overlay-content\">\r\n                <slot\r\n                    @slotchange=\"${this.onClickSlotChange}\"\r\n                    name=\"click-content\"\r\n                ></slot>\r\n                <slot\r\n                    @slotchange=\"${this.onLongpressSlotChange}\"\r\n                    name=\"longpress-content\"\r\n                ></slot>\r\n                <slot\r\n                    @slotchange=\"${this.onHoverSlotChange}\"\r\n                    name=\"hover-content\"\r\n                ></slot>\r\n            </div>\r\n        `;\r\n        /* eslint-enable lit-a11y/click-events-have-key-events */\r\n    }\r\n\r\n    protected updated(changes: PropertyValues): void {\r\n        super.updated(changes);\r\n        if (\r\n            this.disabled &&\r\n            this.closeClickOverlay &&\r\n            changes.has('disabled')\r\n        ) {\r\n            this.closeClickOverlay();\r\n        }\r\n        if (changes.has('open')) {\r\n            this.manageOpen(changes.get('open') as OverlayContentTypes);\r\n        }\r\n    }\r\n\r\n    private manageOpen(previous?: OverlayContentTypes): void {\r\n        switch (this.open) {\r\n            case 'click':\r\n                if (!this.closeClickOverlay) {\r\n                    this.onTriggerClick();\r\n                }\r\n                break;\r\n            case 'hover':\r\n                if (!this.closeHoverOverlay) {\r\n                    this.onTriggerMouseEnter();\r\n                }\r\n                break;\r\n            case 'longpress':\r\n                if (!this.closeLongpressOverlay) {\r\n                    this.onTriggerLongpress();\r\n                    this.onTriggerMouseLeave();\r\n                }\r\n                break;\r\n            default:\r\n                switch (previous) {\r\n                    case 'click':\r\n                        if (this.closeClickOverlay) {\r\n                            this.closeClickOverlay();\r\n                            delete this.closeClickOverlay;\r\n                        }\r\n                        break;\r\n                    case 'longpress':\r\n                        if (this.closeLongpressOverlay) {\r\n                            this.closeLongpressOverlay();\r\n                            delete this.closeLongpressOverlay;\r\n                        }\r\n                        break;\r\n                    case 'hover':\r\n                        this.onTriggerMouseLeave();\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static openOverlay = async (\r\n        target: HTMLElement,\r\n        interaction: TriggerInteractions,\r\n        content: HTMLElement,\r\n        options: OverlayOptions\r\n    ): Promise<() => void> => {\r\n        return await openOverlay(target, interaction, content, options);\r\n    };\r\n\r\n    private get overlayOptions(): OverlayOptions {\r\n        return {\r\n            offset: this.offset,\r\n            placement: this.placement,\r\n            receivesFocus:\r\n                this.type && this.type !== 'inline' ? 'auto' : undefined,\r\n        };\r\n    }\r\n\r\n    private onTrigger(event: CustomEvent<LongpressEvent>): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        switch (event.type) {\r\n            case 'mouseenter':\r\n            case 'focusin':\r\n                if (!this.open && this.hoverContent) {\r\n                    this.open = 'hover';\r\n                }\r\n                return;\r\n            case 'mouseleave':\r\n            case 'focusout':\r\n                if (this.open === 'hover') {\r\n                    this.handleClose();\r\n                }\r\n                return;\r\n            case 'click':\r\n                if (this.clickContent) {\r\n                    this.open = event.type;\r\n                } else if (this.closeHoverOverlay) {\r\n                    event.preventDefault();\r\n                }\r\n                return;\r\n            case 'longpress':\r\n                if (this.longpressContent) {\r\n                    this._longpressEvent = event;\r\n                    this.open = event.type;\r\n                }\r\n                return;\r\n        }\r\n    }\r\n\r\n    private prepareToFocusOverlayContent(overlayContent: HTMLElement): void {\r\n        if (this.type !== 'modal') {\r\n            return;\r\n        }\r\n        const firstFocusable = overlayContent.querySelector(\r\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"]), [focusable]'\r\n        ) as HTMLElement;\r\n        if (!firstFocusable) {\r\n            overlayContent.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    public async onTriggerClick(): Promise<void> {\r\n        if (!this.targetContent || !this.clickContent) {\r\n            return;\r\n        }\r\n        const { targetContent, clickContent } = this;\r\n        this.prepareToFocusOverlayContent(clickContent);\r\n        this.closeClickOverlay = await OverlayTrigger.openOverlay(\r\n            targetContent,\r\n            this.type ? this.type : 'click',\r\n            clickContent,\r\n            this.overlayOptions\r\n        );\r\n    }\r\n\r\n    private _longpressEvent?: CustomEvent<LongpressEvent>;\r\n\r\n    private async onTriggerLongpress(): Promise<void> {\r\n        if (!this.targetContent || !this.longpressContent) {\r\n            return;\r\n        }\r\n        const { targetContent, longpressContent } = this;\r\n        this.prepareToFocusOverlayContent(longpressContent);\r\n        const notImmediatelyClosable =\r\n            this._longpressEvent?.detail?.source !== 'keyboard';\r\n        this.closeLongpressOverlay = await OverlayTrigger.openOverlay(\r\n            targetContent,\r\n            this.type ? this.type : 'longpress',\r\n            longpressContent,\r\n            {\r\n                ...this.overlayOptions,\r\n                receivesFocus: 'auto',\r\n                notImmediatelyClosable,\r\n            }\r\n        );\r\n        this._longpressEvent = undefined;\r\n    }\r\n\r\n    private hoverOverlayReady = Promise.resolve();\r\n    private abortOverlay: (cancelled: boolean) => void = () => {\r\n        return;\r\n    };\r\n\r\n    public async onTriggerMouseEnter(): Promise<void> {\r\n        if (!this.targetContent || !this.hoverContent) {\r\n            return;\r\n        }\r\n        let overlayReady: () => void = () => {\r\n            return;\r\n        };\r\n        this.hoverOverlayReady = new Promise(res => {\r\n            overlayReady = res;\r\n        });\r\n        const abortPromise: Promise<boolean> = new Promise(res => {\r\n            this.abortOverlay = res;\r\n        });\r\n        const { targetContent, hoverContent } = this;\r\n        this.closeHoverOverlay = await OverlayTrigger.openOverlay(\r\n            targetContent,\r\n            'hover',\r\n            hoverContent,\r\n            {\r\n                abortPromise,\r\n                ...this.overlayOptions,\r\n            }\r\n        );\r\n        overlayReady();\r\n    }\r\n\r\n    public async onTriggerMouseLeave(): Promise<void> {\r\n        if (this.abortOverlay) this.abortOverlay(true);\r\n        await this.hoverOverlayReady;\r\n        if (this.closeHoverOverlay) {\r\n            this.closeHoverOverlay();\r\n            delete this.closeHoverOverlay;\r\n        }\r\n    }\r\n\r\n    private onClickSlotChange(\r\n        event: Event & { target: HTMLSlotElement }\r\n    ): void {\r\n        this.clickContent = this.extractSlotContentFromEvent(event);\r\n        this.manageOpen();\r\n    }\r\n\r\n    private onLongpressSlotChange(\r\n        event: Event & { target: HTMLSlotElement }\r\n    ): void {\r\n        this.longpressContent = this.extractSlotContentFromEvent(event);\r\n        this.manageOpen();\r\n    }\r\n\r\n    private onHoverSlotChange(\r\n        event: Event & { target: HTMLSlotElement }\r\n    ): void {\r\n        this.hoverContent = this.extractSlotContentFromEvent(event);\r\n        this.manageOpen();\r\n    }\r\n\r\n    private onTargetSlotChange(\r\n        event: Event & { target: HTMLSlotElement }\r\n    ): void {\r\n        this.targetContent = this.extractSlotContentFromEvent(event);\r\n    }\r\n\r\n    private extractSlotContentFromEvent(event: Event): HTMLElement | undefined {\r\n        const slot = event.target as HTMLSlotElement;\r\n        const nodes = slot.assignedNodes({ flatten: true });\r\n        return nodes.find(node => node instanceof HTMLElement) as HTMLElement;\r\n    }\r\n\r\n    public disconnectedCallback(): void {\r\n        if (this.closeClickOverlay) {\r\n            this.closeClickOverlay();\r\n            delete this.closeClickOverlay;\r\n        }\r\n        if (this.closeHoverOverlay) {\r\n            this.closeHoverOverlay();\r\n            delete this.closeClickOverlay;\r\n        }\r\n        super.disconnectedCallback();\r\n    }\r\n}\r\n"]}