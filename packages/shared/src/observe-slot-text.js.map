{"version":3,"file":"observe-slot-text.js","sourceRoot":"","sources":["../../../../../src/packages/shared/src/observe-slot-text.ts"],"names":[],"mappings":";AAAA,kDAAkD;AAClD,OAAO,EAGH,kBAAkB,EAClB,QAAQ,GACX,MAAM,sBAAsB,CAAC;AAE9B,MAAM,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAC1D,MAAM,iBAAiB,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAClD,MAAM,cAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAahD,MAAM,UAAU,eAAe,CAC3B,WAAc,EACd,YAAqB;;IAErB,MAAM,wBAAyB,SAAQ,WAAW;QAAlD;;YAKW,mBAAc,GAAG,KAAK,CAAC;QAmDlC,CAAC;QA9CU,sBAAsB;YACzB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAAE,OAAO;YACrC,MAAM,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,MAAM,CACrD,CAAC,IAAI,EAAE,EAAE;gBACL,IAAK,IAAoB,CAAC,OAAO,EAAE;oBAC/B,OAAO,IAAI,CAAC;iBACf;gBACD,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;YAC9D,CAAC,CACJ,CAAC;YACF,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;QACnD,CAAC;QAES,YAAY,CAAC,iBAAiC;YACpD,KAAK,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;YACtC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAClC,CAAC;QAEO,OApBC,iBAAiB,EAoBjB,cAAc,EAAC;YACpB,MAAM,MAAM,GAAG,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YACtD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE;gBAC5B,MAAM,QAAQ,GAAG,CACb,aAAoC,EAChC,EAAE;oBACN,KAAK,MAAM,QAAQ,IAAI,aAAa,EAAE;wBAClC,IAAI,QAAQ,CAAC,IAAI,KAAK,eAAe,EAAE;4BACnC,IAAI,CAAC,sBAAsB,EAAE,CAAC;yBACjC;qBACJ;gBACL,CAAC,CAAC;gBACF,IAAI,CAAC,mBAAmB,CAAC,GAAG,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;aAC9D;YACD,IAAI,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC;QAEM,iBAAiB;YACpB,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAC1B,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC;QAC3B,CAAC;QAEM,oBAAoB;YACvB,IAAI,IAAI,CAAC,mBAAmB,CAAC,EAAE;gBAC3B,IAAI,CAAC,mBAAmB,CAAC,CAAC,UAAU,EAAE,CAAC;aAC1C;YACD,KAAK,CAAC,oBAAoB,EAAE,CAAC;QACjC,CAAC;KACJ;IAnDG;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;oEAChB;IAG9B;QADC,kBAAkB,CAAC,YAAY,EAAE,IAAI,CAAC;sDACe;IAiD1D,OAAO,wBAAwB,CAAC;AACpC,CAAC","sourcesContent":["/* Copyright 2021 i2c Inc. All rights reserved. */\r\nimport {\r\n    PropertyValues,\r\n    UpdatingElement,\r\n    queryAssignedNodes,\r\n    property,\r\n} from '../../base/src/index';\r\n\r\nconst slotElementObserver = Symbol('slotElementObserver');\r\nconst assignedNodesList = Symbol('assignedNodes');\r\nconst startObserving = Symbol('startObserving');\r\n\r\ntype Constructor<T = Record<string, unknown>> = {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    new (...args: any[]): T;\r\n    prototype: T;\r\n};\r\n\r\nexport interface SlotTextObservingInterface {\r\n    slotHasContent: boolean;\r\n    manageTextObservedSlot(): void;\r\n}\r\n\r\nexport function ObserveSlotText<T extends Constructor<UpdatingElement>>(\r\n    constructor: T,\r\n    slotSelector?: string\r\n): T & Constructor<SlotTextObservingInterface> {\r\n    class SlotTextObservingElement extends constructor\r\n        implements SlotTextObservingInterface {\r\n        private [slotElementObserver]: MutationObserver;\r\n\r\n        @property({ type: Boolean, attribute: false })\r\n        public slotHasContent = false;\r\n\r\n        @queryAssignedNodes(slotSelector, true)\r\n        private [assignedNodesList]!: NodeListOf<HTMLElement>;\r\n\r\n        public manageTextObservedSlot(): void {\r\n            if (!this[assignedNodesList]) return;\r\n            const assignedNodes = [...this[assignedNodesList]].filter(\r\n                (node) => {\r\n                    if ((node as HTMLElement).tagName) {\r\n                        return true;\r\n                    }\r\n                    return node.textContent ? node.textContent.trim() : false;\r\n                }\r\n            );\r\n            this.slotHasContent = assignedNodes.length > 0;\r\n        }\r\n\r\n        protected firstUpdated(changedProperties: PropertyValues): void {\r\n            super.firstUpdated(changedProperties);\r\n            this.manageTextObservedSlot();\r\n        }\r\n\r\n        private [startObserving](): void {\r\n            const config = { characterData: true, subtree: true };\r\n            if (!this[slotElementObserver]) {\r\n                const callback = (\r\n                    mutationsList: Array<MutationRecord>\r\n                ): void => {\r\n                    for (const mutation of mutationsList) {\r\n                        if (mutation.type === 'characterData') {\r\n                            this.manageTextObservedSlot();\r\n                        }\r\n                    }\r\n                };\r\n                this[slotElementObserver] = new MutationObserver(callback);\r\n            }\r\n            this[slotElementObserver].observe(this, config);\r\n        }\r\n\r\n        public connectedCallback(): void {\r\n            super.connectedCallback();\r\n            this[startObserving]();\r\n        }\r\n\r\n        public disconnectedCallback(): void {\r\n            if (this[slotElementObserver]) {\r\n                this[slotElementObserver].disconnect();\r\n            }\r\n            super.disconnectedCallback();\r\n        }\r\n    }\r\n    return SlotTextObservingElement;\r\n}\r\n"]}