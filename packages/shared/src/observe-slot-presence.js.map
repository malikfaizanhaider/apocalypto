{"version":3,"file":"observe-slot-presence.js","sourceRoot":"","sources":["../../../../../src/packages/shared/src/observe-slot-presence.ts"],"names":[],"mappings":"AAGA,MAAM,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAC1D,MAAM,cAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAChD,MAAM,oBAAoB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAc5D,MAAM,UAAU,mBAAmB,CAC/B,WAAc,EACd,gBAAmC;;IAEnC,MAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC;QACrD,CAAC,CAAC,gBAAgB;QAClB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC;IACzB,MAAM,4BAA6B,SAAQ,WAAW;QAAtD;;YAmBY,QAAsB,GAAyB,IAAI,GAAG,EAAE,CAAC;YAW1D,+BAA0B,GAAG,GAAS,EAAE;gBAC3C,iBAAiB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;oBACnC,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAC1B,QAAQ,EACR,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CACjC,CAAC;gBACN,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,aAAa,EAAE,CAAC;YACzB,CAAC,CAAC;QAsBN,CAAC;QAxDG;;WAEG;QACH,IAAW,oBAAoB;YAC3B,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;gBAChC,OAAO,CACH,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;oBACpD,KAAK,CACR,CAAC;aACL;iBAAM;gBACH,MAAM,IAAI,KAAK,CACX,8GAA8G,CACjH,CAAC;aACL;QACL,CAAC;QAGM,sBAAsB,CAAC,QAAgB;YAC1C,IAAI,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC1C,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC;aAC5D;YACD,MAAM,IAAI,KAAK,CACX,mDAAmD,CACtD,CAAC;QACN,CAAC;QAYO,OArBC,oBAAoB,EAqBpB,cAAc,EAAC;YACpB,MAAM,MAAM,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAClD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE;gBAC5B,IAAI,CAAC,mBAAmB,CAAC,GAAG,IAAI,gBAAgB,CAC5C,IAAI,CAAC,0BAA0B,CAClC,CAAC;aACL;YACD,IAAI,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAChD,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACtC,CAAC;QAEM,iBAAiB;YACpB,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAC1B,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC;QAC3B,CAAC;QAEM,oBAAoB;YACvB,IAAI,CAAC,mBAAmB,CAAC,CAAC,UAAU,EAAE,CAAC;YACvC,KAAK,CAAC,oBAAoB,EAAE,CAAC;QACjC,CAAC;KACJ;IACD,OAAO,4BAA4B,CAAC;AACxC,CAAC","sourcesContent":["\r\nimport { UpdatingElement } from '../../base/src/index';\r\n\r\nconst slotElementObserver = Symbol('slotElementObserver');\r\nconst startObserving = Symbol('startObserving');\r\nconst slotContentIsPresent = Symbol('slotContentIsPresent');\r\n\r\ntype Constructor<T = Record<string, unknown>> = {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    new (...args: any[]): T;\r\n    prototype: T;\r\n};\r\n\r\nexport interface SlotPresenceObservingInterface {\r\n    slotContentIsPresent: boolean;\r\n    getSlotContentPresence(selector: string): boolean;\r\n    managePresenceObservedSlot(): void;\r\n}\r\n\r\nexport function ObserveSlotPresence<T extends Constructor<UpdatingElement>>(\r\n    constructor: T,\r\n    lightDomSelector: string | string[]\r\n): T & Constructor<SlotPresenceObservingInterface> {\r\n    const lightDomSelectors = Array.isArray(lightDomSelector)\r\n        ? lightDomSelector\r\n        : [lightDomSelector];\r\n    class SlotPresenceObservingElement extends constructor\r\n        implements SlotPresenceObservingInterface {\r\n        private [slotElementObserver]!: MutationObserver;\r\n\r\n        /**\r\n         *  @private\r\n         */\r\n        public get slotContentIsPresent(): boolean {\r\n            if (lightDomSelectors.length === 1) {\r\n                return (\r\n                    this[slotContentIsPresent].get(lightDomSelectors[0]) ||\r\n                    false\r\n                );\r\n            } else {\r\n                throw new Error(\r\n                    'Multiple selectors provided to `ObserveSlotPresence` use `getSlotContentPresence(selector: string)` instead.'\r\n                );\r\n            }\r\n        }\r\n        private [slotContentIsPresent]: Map<string, boolean> = new Map();\r\n\r\n        public getSlotContentPresence(selector: string): boolean {\r\n            if (this[slotContentIsPresent].has(selector)) {\r\n                return this[slotContentIsPresent].get(selector) || false;\r\n            }\r\n            throw new Error(\r\n                `The provided selector \\`\\` is not being observed.`\r\n            );\r\n        }\r\n\r\n        public managePresenceObservedSlot = (): void => {\r\n            lightDomSelectors.forEach((selector) => {\r\n                this[slotContentIsPresent].set(\r\n                    selector,\r\n                    !!this.querySelector(selector)\r\n                );\r\n            });\r\n            this.requestUpdate();\r\n        };\r\n\r\n        private [startObserving](): void {\r\n            const config = { childList: true, subtree: true };\r\n            if (!this[slotElementObserver]) {\r\n                this[slotElementObserver] = new MutationObserver(\r\n                    this.managePresenceObservedSlot\r\n                );\r\n            }\r\n            this[slotElementObserver].observe(this, config);\r\n            this.managePresenceObservedSlot();\r\n        }\r\n\r\n        public connectedCallback(): void {\r\n            super.connectedCallback();\r\n            this[startObserving]();\r\n        }\r\n\r\n        public disconnectedCallback(): void {\r\n            this[slotElementObserver].disconnect();\r\n            super.disconnectedCallback();\r\n        }\r\n    }\r\n    return SlotPresenceObservingElement;\r\n}\r\n"]}