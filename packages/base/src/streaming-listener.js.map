{"version":3,"file":"streaming-listener.js","sourceRoot":"","sources":["../../../../../src/packages/base/src/streaming-listener.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { EventPart, directive, Part } from 'lit-html';\r\n\r\ntype StreamingEvent = {\r\n    type: string | string[];\r\n    fn: (event: any) => void;\r\n};\r\n\r\ntype StreamingListener = {\r\n    start: StreamingEvent;\r\n    stream: StreamingEvent;\r\n    end: StreamingEvent;\r\n    removeEventListeners: () => void;\r\n};\r\n\r\nconst previousValues = new WeakMap<Part, StreamingListener>();\r\n\r\nconst stateMap = new WeakMap<Part, boolean>();\r\n\r\nconst addListener = (\r\n    el: Element,\r\n    type: string | string[],\r\n    fn: EventListenerOrEventListenerObject\r\n): void => {\r\n    if (Array.isArray(type)) {\r\n        type.map((eventName) => {\r\n            el.addEventListener(eventName, fn);\r\n        });\r\n    } else {\r\n        el.addEventListener(type, fn);\r\n    }\r\n};\r\n\r\nconst removeListener = (\r\n    el: Element,\r\n    type: string | string[],\r\n    fn: EventListenerOrEventListenerObject\r\n): void => {\r\n    if (Array.isArray(type)) {\r\n        type.map((eventName) => {\r\n            el.removeEventListener(eventName, fn);\r\n        });\r\n    } else {\r\n        el.removeEventListener(type, fn);\r\n    }\r\n};\r\n\r\nconst addEventListeners = (\r\n    part: EventPart,\r\n    start: StreamingEvent,\r\n    stream: StreamingEvent,\r\n    end: StreamingEvent\r\n): (() => void) => {\r\n    const { element, eventContext } = part;\r\n    const isStreaming = stateMap.get(part);\r\n    let handledStream = false;\r\n\r\n    const handleStream = (event: any): void => {\r\n        if (!handledStream) {\r\n            handledStream = true;\r\n            stream.fn.call(eventContext || element, event);\r\n            requestAnimationFrame(() => {\r\n                handledStream = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleEnd = (event: any): void => {\r\n        addListener(element, start.type, handleStart);\r\n        removeListener(element, stream.type, handleStream);\r\n        removeListener(element, end.type, handleEnd);\r\n        stateMap.set(part, false);\r\n        end.fn.call(eventContext || element, event);\r\n    };\r\n\r\n    const handleStart = (event: any): void => {\r\n        start.fn.call(eventContext || element, event);\r\n        if (event.defaultPrevented) {\r\n            return;\r\n        }\r\n        removeListener(element, start.type, handleStart);\r\n        addListener(element, stream.type, handleStream);\r\n        addListener(element, end.type, handleEnd);\r\n        stateMap.set(part, true);\r\n    };\r\n\r\n    if (!isStreaming) {\r\n        addListener(element, start.type, handleStart);\r\n    } else {\r\n        addListener(element, stream.type, handleStream);\r\n        addListener(element, end.type, handleEnd);\r\n    }\r\n\r\n    return () => {\r\n        removeListener(element, start.type, handleStart);\r\n        removeListener(element, stream.type, handleStream);\r\n        removeListener(element, end.type, handleEnd);\r\n    };\r\n};\r\n\r\n/**\r\n * For AttributeParts, sets the attribute if the value is defined and removes\r\n * the attribute if the value is undefined.\r\n *\r\n * For other part types, this directive is a no-op.\r\n */\r\nexport const streamingListener = directive(\r\n    (start: StreamingEvent, stream: StreamingEvent, end: StreamingEvent) => (\r\n        part: Part\r\n    ) => {\r\n        if (!(part instanceof EventPart)) {\r\n            return;\r\n        }\r\n        if (previousValues.has(part)) {\r\n            const previous = previousValues.get(part) as StreamingListener;\r\n            if (\r\n                start.type === previous.start.type &&\r\n                stream.type === previous.stream.type &&\r\n                end.type === previous.end.type &&\r\n                start.fn === previous.start.fn &&\r\n                stream.fn === previous.stream.fn &&\r\n                end.fn === previous.end.fn\r\n            ) {\r\n                return;\r\n            }\r\n            previous.removeEventListeners();\r\n        } else {\r\n            stateMap.set(part, false);\r\n        }\r\n        previousValues.set(part, {\r\n            start,\r\n            stream,\r\n            end,\r\n            removeEventListeners: addEventListeners(part, start, stream, end),\r\n        });\r\n    }\r\n);\r\n"]}