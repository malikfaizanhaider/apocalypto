{"version":3,"file":"sizedMixin.js","sourceRoot":"","sources":["../../../../../src/packages/base/src/sizedMixin.ts"],"names":[],"mappings":";AACA,OAAO,EAAmB,QAAQ,EAAkB,MAAM,aAAa,CAAC;AAcxE,MAAM,UAAU,UAAU,CACtB,WAAc,EACd,EACI,UAAU,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAClC,aAAa,MAIb,EAAE;IAEN,MAAM,YAAa,SAAQ,WAAW;QAAtC;;YAyBY,UAAK,GAAuB,GAAG,CAAC;QAQ5C,CAAC;QA/BG,IAAW,IAAI;YACX,OAAO,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC;QAC7B,CAAC;QAED,IAAW,IAAI,CAAC,KAAkB;YAC9B,MAAM,WAAW,GAAG,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;YAC/C,MAAM,IAAI,GAAG,CAAC,KAAK;gBACf,CAAC,CAAC,KAAK,CAAC,iBAAiB,EAAE;gBAC3B,CAAC,CAAC,KAAK,CAAgB,CAAC;YAC5B,MAAM,SAAS,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACxC,CAAC,CAAC,IAAI;gBACN,CAAC,CAAC,WAAW,CAAgB,CAAC;YAClC,IAAI,SAAS,EAAE;gBACX,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;aACxC;YACD,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;gBAC1B,OAAO;aACV;YACD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC;QAIS,YAAY,CAAC,OAAuB;YAC1C,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAC5B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE;gBAC9C,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aACxC;QACL,CAAC;KACJ;IA/BG;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4CAGzC;IA8BL,OAAO,YAAY,CAAC;AACxB,CAAC","sourcesContent":["\r\nimport { UpdatingElement, property, PropertyValues } from 'lit-element';\r\n\r\ntype Constructor<T = Record<string, unknown>> = {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    new (...args: any[]): T;\r\n    prototype: T;\r\n};\r\n\r\nexport type ElementSize = 's' | 'm' | 'l' | 'xl' | 'xxl';\r\n\r\nexport interface SizedElementInterface {\r\n    size: ElementSize;\r\n}\r\n\r\nexport function SizedMixin<T extends Constructor<UpdatingElement>>(\r\n    constructor: T,\r\n    {\r\n        validSizes = ['s', 'm', 'l', 'xl'],\r\n        noDefaultSize,\r\n    }: {\r\n        validSizes?: ElementSize[];\r\n        noDefaultSize?: boolean;\r\n    } = {}\r\n): T & Constructor<SizedElementInterface> {\r\n    class SizedElement extends constructor {\r\n        @property({ type: String, reflect: true })\r\n        public get size(): ElementSize {\r\n            return this._size || 'm';\r\n        }\r\n\r\n        public set size(value: ElementSize) {\r\n            const defaultSize = noDefaultSize ? null : 'm';\r\n            const size = (value\r\n                ? value.toLocaleLowerCase()\r\n                : value) as ElementSize;\r\n            const validSize = (validSizes.includes(size)\r\n                ? size\r\n                : defaultSize) as ElementSize;\r\n            if (validSize) {\r\n                this.setAttribute('size', validSize);\r\n            }\r\n            if (this._size === validSize) {\r\n                return;\r\n            }\r\n            const oldSize = this._size;\r\n            this._size = validSize;\r\n            this.requestUpdate('size', oldSize);\r\n        }\r\n\r\n        private _size: ElementSize | null = 'm';\r\n\r\n        protected firstUpdated(changes: PropertyValues): void {\r\n            super.firstUpdated(changes);\r\n            if (!this.hasAttribute('size') && !noDefaultSize) {\r\n                this.setAttribute('size', this.size);\r\n            }\r\n        }\r\n    }\r\n    return SizedElement;\r\n}\r\n"]}